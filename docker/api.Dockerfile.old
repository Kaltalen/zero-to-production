# -----------------------------------------
# Multi build file
# One for building our app and one for production
# -----------------------------------------

# -----------------------------------------
# Build container
# -----------------------------------------
# The build container is from the full node image for dependency installation
FROM node AS builder

# Create the tmp working directory
WORKDIR /tmp

# Set the node environment to development
ENV NODE_ENV development

# Copy all files required for the build container to run
# Do not copy the source files here, every change will require a new npm install
# NOTE: The .dockerignore needs to explicitly allow files to be 'visible' or this will fail


# COPY all top level files NOTE -> Do not copy the top level package.json, use the local one
COPY angular.json package-lock.json tsconfig.json tsconfig.libs.json /tmp/

# COPY the local package.json
COPY apps/servers/api/package.json  /tmp/

# TODO -> Remove once own packages
# COPY the tools accross that include the builders
COPY tools/  /tmp/tools

# COPS all src files
COPY apps/servers/api/ /tmp/apps/servers/api

# Make the API src directory, libs directory and distribution director 
RUN mkdir -p /tmp/dist

RUN cd /tmp 
# RUN mkdir -p /tmp/apps/servers/api && mkdir -p /tmp/dist


# COPY package.json package-lock.json tsconfig.json /tmp/


# You have to specify "--unsafe-perm" with npm install
# when running as root.  Failing to do this can cause
# install to appear to succeed even if a preinstall
# script fails, and may have other adverse consequences
# as well.
# This command will also cat the npm-debug.log file after the
# build, if it exists.

# RUN npm install --only=dev --unsafe-perm || \
#   ((if [ -f npm-debug.log ]; then \
#   cat npm-debug.log; \
#   fi) && false)

RUN npm install
# NOTE: Because of https://github.com/npm/npm/issues/12184
# Can not use --only=dev at this point

# # Copy the src files accross
# COPY src src/


# COPS all libs 
COPY libs/ /tmp/libs

# TODO -> remove this
COPY testing/ /tmp/testing

RUN npm run build:libs
# Run the production build task
RUN npm run build 

# -----------------------------------------
# Production container
# -----------------------------------------
# Production image from the alpine image
FROM node:alpine AS production

# -----------------------------------------
# Install requirements for tesseract and image magick
# -----------------------------------------

# Create the app working directory
WORKDIR /app/api
# WORKDIR /usr/src/app

# Set the node environment to production
# This also means only prodcution npm's are installaed
ENV NODE_ENV production

# RUN mkdir /app/api/dist
# Copy the distribution folder from the builder file
COPY --from=builder /tmp/dist dist/

# Copy the distribution folder from the builder file
COPY --from=builder tmp/package.json tmp/package-lock.json /app/api/


RUN cd /app/api

# # Copy accross all reqired files
# COPY package.json package-lock.json ./

# Install all dependencies
RUN npm install --only=prod --unsafe-perm || \
  ((if [ -f npm-debug.log ]; then \
  cat npm-debug.log; \
  fi) && false)

# # Copy the distribution folder from the builder file
# COPY --from=builder /usr/src/app/dist dist/

# Expost port 3000
# This port must match the port for the K8's continer health probe
# It must be exposed else the probe will fail
EXPOSE 3000

# Run the start command
# CMD node dist/servers/api/main.js
CMD ls -la dist/servers/api